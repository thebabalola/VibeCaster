/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IcebreakerContract {
  export type CategoryStruct = {
    name: string;
    description: string;
    exists: boolean;
  };

  export type CategoryStructOutput = [
    name: string,
    description: string,
    exists: boolean
  ] & { name: string; description: string; exists: boolean };
}

export interface VibeCasterAdminInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeAdmin"
      | "authorizeContractInPoints"
      | "authorizeMinterInBadges"
      | "authorizedAdmins"
      | "badgesContract"
      | "chainReactionContract"
      | "createIcebreakerCategory"
      | "deauthorizeAdmin"
      | "deauthorizeContractInPoints"
      | "deauthorizeMinterInBadges"
      | "emergencyPause"
      | "emergencyUnpause"
      | "getActivityStreak"
      | "getCategories"
      | "getChainReactionStats"
      | "getIcebreakerStats"
      | "getLoginStreak"
      | "getPoints"
      | "getRoastMeStats"
      | "getUserBadges"
      | "icebreakerContract"
      | "isAuthorizedAdmin"
      | "owner"
      | "pointsContract"
      | "renounceOwnership"
      | "roastContract"
      | "setBadgeBaseURI"
      | "setBadgeRequirements"
      | "setBadgeURIs"
      | "setContracts"
      | "transferOwnership"
      | "updateChainReactionPoints"
      | "updateDailyLoginPoints"
      | "updateIcebreakerPoints"
      | "updateRoastMePoints"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAuthorized"
      | "AdminDeauthorized"
      | "BadgeRequirementsUpdated"
      | "BadgeURIsUpdated"
      | "CategoryCreated"
      | "OwnershipTransferred"
      | "PointsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeContractInPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeMinterInBadges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAdmins",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "badgesContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainReactionContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createIcebreakerCategory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeContractInPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeMinterInBadges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActivityStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainReactionStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIcebreakerStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoginStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoastMeStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBadges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "icebreakerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roastContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeBaseURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeRequirements",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeURIs",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainReactionPoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDailyLoginPoints",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIcebreakerPoints",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoastMePoints",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeContractInPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeMinterInBadges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgesContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainReactionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIcebreakerCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeContractInPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeMinterInBadges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivityStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainReactionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIcebreakerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoginStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoastMeStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBadges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "icebreakerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roastContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeURIs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChainReactionPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDailyLoginPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIcebreakerPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoastMePoints",
    data: BytesLike
  ): Result;
}

export namespace AdminAuthorizedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminDeauthorizedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeRequirementsUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeURIsUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CategoryCreatedEvent {
  export type InputTuple = [
    categoryId: BigNumberish,
    name: string,
    description: string
  ];
  export type OutputTuple = [
    categoryId: bigint,
    name: string,
    description: string
  ];
  export interface OutputObject {
    categoryId: bigint;
    name: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsUpdatedEvent {
  export type InputTuple = [
    contractName: string,
    newPointsPerAction: BigNumberish,
    newPointsPerVote: BigNumberish,
    newPointsPerBonus: BigNumberish
  ];
  export type OutputTuple = [
    contractName: string,
    newPointsPerAction: bigint,
    newPointsPerVote: bigint,
    newPointsPerBonus: bigint
  ];
  export interface OutputObject {
    contractName: string;
    newPointsPerAction: bigint;
    newPointsPerVote: bigint;
    newPointsPerBonus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VibeCasterAdmin extends BaseContract {
  connect(runner?: ContractRunner | null): VibeCasterAdmin;
  waitForDeployment(): Promise<this>;

  interface: VibeCasterAdminInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeAdmin: TypedContractMethod<
    [admin: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizeContractInPoints: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizeMinterInBadges: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedAdmins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  badgesContract: TypedContractMethod<[], [string], "view">;

  chainReactionContract: TypedContractMethod<[], [string], "view">;

  createIcebreakerCategory: TypedContractMethod<
    [name: string, description: string],
    [bigint],
    "nonpayable"
  >;

  deauthorizeAdmin: TypedContractMethod<
    [admin: AddressLike],
    [void],
    "nonpayable"
  >;

  deauthorizeContractInPoints: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  deauthorizeMinterInBadges: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  getActivityStreak: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getCategories: TypedContractMethod<
    [],
    [IcebreakerContract.CategoryStructOutput[]],
    "view"
  >;

  getChainReactionStats: TypedContractMethod<
    [],
    [[bigint, bigint] & { totalChallenges: bigint; totalResponses: bigint }],
    "view"
  >;

  getIcebreakerStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalCategories: bigint;
        totalPrompts: bigint;
        totalPolls: bigint;
      }
    ],
    "view"
  >;

  getLoginStreak: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getPoints: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getRoastMeStats: TypedContractMethod<[], [bigint], "view">;

  getUserBadges: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  icebreakerContract: TypedContractMethod<[], [string], "view">;

  isAuthorizedAdmin: TypedContractMethod<
    [admin: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pointsContract: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roastContract: TypedContractMethod<[], [string], "view">;

  setBadgeBaseURI: TypedContractMethod<
    [newBaseURI: string],
    [void],
    "nonpayable"
  >;

  setBadgeRequirements: TypedContractMethod<
    [
      _firstActivityRequirement: BigNumberish,
      _loginStreakRequirement: BigNumberish,
      _activityStreakRequirement: BigNumberish,
      _topRoasterRequirement: BigNumberish,
      _chainMasterRequirement: BigNumberish,
      _icebreakerRequirement: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setBadgeURIs: TypedContractMethod<
    [
      _firstActivityBadgeURI: string,
      _loginStreakBadgeURI: string,
      _activityStreakBadgeURI: string,
      _topRoasterBadgeURI: string,
      _chainMasterBadgeURI: string,
      _icebreakerBadgeURI: string
    ],
    [void],
    "nonpayable"
  >;

  setContracts: TypedContractMethod<
    [
      _pointsContract: AddressLike,
      _badgesContract: AddressLike,
      _roastContract: AddressLike,
      _icebreakerContract: AddressLike,
      _chainReactionContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateChainReactionPoints: TypedContractMethod<
    [newPointsPerChallenge: BigNumberish, newPointsPerResponse: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateDailyLoginPoints: TypedContractMethod<
    [
      newDailyLoginPoints: BigNumberish,
      newStreakBonusPoints: BigNumberish,
      newActivityStreakBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateIcebreakerPoints: TypedContractMethod<
    [
      newPointsPerPrompt: BigNumberish,
      newPointsPerResponse: BigNumberish,
      newPointsPerVote: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateRoastMePoints: TypedContractMethod<
    [
      newPointsPerRoast: BigNumberish,
      newPointsPerVote: BigNumberish,
      newPointsPerFunnyVote: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizeContractInPoints"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizeMinterInBadges"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAdmins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "badgesContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainReactionContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createIcebreakerCategory"
  ): TypedContractMethod<
    [name: string, description: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deauthorizeAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deauthorizeContractInPoints"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deauthorizeMinterInBadges"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActivityStreak"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCategories"
  ): TypedContractMethod<
    [],
    [IcebreakerContract.CategoryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChainReactionStats"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { totalChallenges: bigint; totalResponses: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIcebreakerStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalCategories: bigint;
        totalPrompts: bigint;
        totalPolls: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLoginStreak"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoints"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoastMeStats"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBadges"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "icebreakerContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedAdmin"
  ): TypedContractMethod<[admin: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pointsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roastContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBadgeBaseURI"
  ): TypedContractMethod<[newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBadgeRequirements"
  ): TypedContractMethod<
    [
      _firstActivityRequirement: BigNumberish,
      _loginStreakRequirement: BigNumberish,
      _activityStreakRequirement: BigNumberish,
      _topRoasterRequirement: BigNumberish,
      _chainMasterRequirement: BigNumberish,
      _icebreakerRequirement: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBadgeURIs"
  ): TypedContractMethod<
    [
      _firstActivityBadgeURI: string,
      _loginStreakBadgeURI: string,
      _activityStreakBadgeURI: string,
      _topRoasterBadgeURI: string,
      _chainMasterBadgeURI: string,
      _icebreakerBadgeURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContracts"
  ): TypedContractMethod<
    [
      _pointsContract: AddressLike,
      _badgesContract: AddressLike,
      _roastContract: AddressLike,
      _icebreakerContract: AddressLike,
      _chainReactionContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateChainReactionPoints"
  ): TypedContractMethod<
    [newPointsPerChallenge: BigNumberish, newPointsPerResponse: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDailyLoginPoints"
  ): TypedContractMethod<
    [
      newDailyLoginPoints: BigNumberish,
      newStreakBonusPoints: BigNumberish,
      newActivityStreakBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateIcebreakerPoints"
  ): TypedContractMethod<
    [
      newPointsPerPrompt: BigNumberish,
      newPointsPerResponse: BigNumberish,
      newPointsPerVote: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRoastMePoints"
  ): TypedContractMethod<
    [
      newPointsPerRoast: BigNumberish,
      newPointsPerVote: BigNumberish,
      newPointsPerFunnyVote: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminAuthorized"
  ): TypedContractEvent<
    AdminAuthorizedEvent.InputTuple,
    AdminAuthorizedEvent.OutputTuple,
    AdminAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "AdminDeauthorized"
  ): TypedContractEvent<
    AdminDeauthorizedEvent.InputTuple,
    AdminDeauthorizedEvent.OutputTuple,
    AdminDeauthorizedEvent.OutputObject
  >;
  getEvent(
    key: "BadgeRequirementsUpdated"
  ): TypedContractEvent<
    BadgeRequirementsUpdatedEvent.InputTuple,
    BadgeRequirementsUpdatedEvent.OutputTuple,
    BadgeRequirementsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BadgeURIsUpdated"
  ): TypedContractEvent<
    BadgeURIsUpdatedEvent.InputTuple,
    BadgeURIsUpdatedEvent.OutputTuple,
    BadgeURIsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CategoryCreated"
  ): TypedContractEvent<
    CategoryCreatedEvent.InputTuple,
    CategoryCreatedEvent.OutputTuple,
    CategoryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsUpdated"
  ): TypedContractEvent<
    PointsUpdatedEvent.InputTuple,
    PointsUpdatedEvent.OutputTuple,
    PointsUpdatedEvent.OutputObject
  >;

  filters: {
    "AdminAuthorized(address)": TypedContractEvent<
      AdminAuthorizedEvent.InputTuple,
      AdminAuthorizedEvent.OutputTuple,
      AdminAuthorizedEvent.OutputObject
    >;
    AdminAuthorized: TypedContractEvent<
      AdminAuthorizedEvent.InputTuple,
      AdminAuthorizedEvent.OutputTuple,
      AdminAuthorizedEvent.OutputObject
    >;

    "AdminDeauthorized(address)": TypedContractEvent<
      AdminDeauthorizedEvent.InputTuple,
      AdminDeauthorizedEvent.OutputTuple,
      AdminDeauthorizedEvent.OutputObject
    >;
    AdminDeauthorized: TypedContractEvent<
      AdminDeauthorizedEvent.InputTuple,
      AdminDeauthorizedEvent.OutputTuple,
      AdminDeauthorizedEvent.OutputObject
    >;

    "BadgeRequirementsUpdated()": TypedContractEvent<
      BadgeRequirementsUpdatedEvent.InputTuple,
      BadgeRequirementsUpdatedEvent.OutputTuple,
      BadgeRequirementsUpdatedEvent.OutputObject
    >;
    BadgeRequirementsUpdated: TypedContractEvent<
      BadgeRequirementsUpdatedEvent.InputTuple,
      BadgeRequirementsUpdatedEvent.OutputTuple,
      BadgeRequirementsUpdatedEvent.OutputObject
    >;

    "BadgeURIsUpdated()": TypedContractEvent<
      BadgeURIsUpdatedEvent.InputTuple,
      BadgeURIsUpdatedEvent.OutputTuple,
      BadgeURIsUpdatedEvent.OutputObject
    >;
    BadgeURIsUpdated: TypedContractEvent<
      BadgeURIsUpdatedEvent.InputTuple,
      BadgeURIsUpdatedEvent.OutputTuple,
      BadgeURIsUpdatedEvent.OutputObject
    >;

    "CategoryCreated(uint256,string,string)": TypedContractEvent<
      CategoryCreatedEvent.InputTuple,
      CategoryCreatedEvent.OutputTuple,
      CategoryCreatedEvent.OutputObject
    >;
    CategoryCreated: TypedContractEvent<
      CategoryCreatedEvent.InputTuple,
      CategoryCreatedEvent.OutputTuple,
      CategoryCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsUpdated(string,uint256,uint256,uint256)": TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;
    PointsUpdated: TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;
  };
}
