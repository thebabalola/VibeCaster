/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VibeCasterBadgesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activityStreakBadgeURI"
      | "activityStreakRequirement"
      | "approve"
      | "authorizeMinter"
      | "authorizedMinters"
      | "badgeMetadata"
      | "balanceOf"
      | "baseURI"
      | "chainMasterBadgeURI"
      | "chainMasterRequirement"
      | "claimActivityStreakBadge"
      | "claimChainMasterBadge"
      | "claimFirstActivityBadge"
      | "claimIcebreakerBadge"
      | "claimLoginStreakBadge"
      | "claimTopRoasterBadge"
      | "deauthorizeMinter"
      | "firstActivityBadgeURI"
      | "firstActivityRequirement"
      | "getApproved"
      | "getBadgeMetadata"
      | "getBadges"
      | "hasActivityStreakBadge"
      | "hasChainMasterBadge"
      | "hasFirstActivityBadge"
      | "hasIcebreakerBadge"
      | "hasLoginStreakBadge"
      | "hasTopRoasterBadge"
      | "icebreakerBadgeURI"
      | "icebreakerRequirement"
      | "isApprovedForAll"
      | "isAuthorizedMinter"
      | "loginStreakBadgeURI"
      | "loginStreakRequirement"
      | "mintBadge"
      | "name"
      | "owner"
      | "ownerOf"
      | "pointsContract"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBadgeRequirements"
      | "setBadgeURIs"
      | "setBaseURI"
      | "setPointsContract"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "topRoasterBadgeURI"
      | "topRoasterRequirement"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "userBadges"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BadgeClaimed"
      | "BadgeMinted"
      | "BaseURIUpdated"
      | "MinterAuthorized"
      | "MinterDeauthorized"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activityStreakBadgeURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activityStreakRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedMinters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "badgeMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "chainMasterBadgeURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainMasterRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimActivityStreakBadge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimChainMasterBadge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFirstActivityBadge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimIcebreakerBadge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimLoginStreakBadge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTopRoasterBadge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "firstActivityBadgeURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstActivityRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgeMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasActivityStreakBadge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasChainMasterBadge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasFirstActivityBadge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasIcebreakerBadge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLoginStreakBadge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTopRoasterBadge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "icebreakerBadgeURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "icebreakerRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loginStreakBadgeURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loginStreakRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBadge",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pointsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeRequirements",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeURIs",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPointsContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topRoasterBadgeURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topRoasterRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userBadges",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activityStreakBadgeURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activityStreakRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainMasterBadgeURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainMasterRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimActivityStreakBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimChainMasterBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFirstActivityBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimIcebreakerBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLoginStreakBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTopRoasterBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstActivityBadgeURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstActivityRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBadges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasActivityStreakBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasChainMasterBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasFirstActivityBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasIcebreakerBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLoginStreakBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasTopRoasterBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "icebreakerBadgeURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "icebreakerRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loginStreakBadgeURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loginStreakRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBadge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeURIs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPointsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "topRoasterBadgeURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topRoasterRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBadges", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeClaimedEvent {
  export type InputTuple = [user: AddressLike, badgeType: string];
  export type OutputTuple = [user: string, badgeType: string];
  export interface OutputObject {
    user: string;
    badgeType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BadgeMintedEvent {
  export type InputTuple = [
    user: AddressLike,
    badgeId: BigNumberish,
    badgeType: string
  ];
  export type OutputTuple = [user: string, badgeId: bigint, badgeType: string];
  export interface OutputObject {
    user: string;
    badgeId: bigint;
    badgeType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseURIUpdatedEvent {
  export type InputTuple = [newBaseURI: string];
  export type OutputTuple = [newBaseURI: string];
  export interface OutputObject {
    newBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterAuthorizedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterDeauthorizedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VibeCasterBadges extends BaseContract {
  connect(runner?: ContractRunner | null): VibeCasterBadges;
  waitForDeployment(): Promise<this>;

  interface: VibeCasterBadgesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activityStreakBadgeURI: TypedContractMethod<[], [string], "view">;

  activityStreakRequirement: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  authorizeMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedMinters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  badgeMetadata: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseURI: TypedContractMethod<[], [string], "view">;

  chainMasterBadgeURI: TypedContractMethod<[], [string], "view">;

  chainMasterRequirement: TypedContractMethod<[], [bigint], "view">;

  claimActivityStreakBadge: TypedContractMethod<[], [void], "nonpayable">;

  claimChainMasterBadge: TypedContractMethod<[], [void], "nonpayable">;

  claimFirstActivityBadge: TypedContractMethod<[], [void], "nonpayable">;

  claimIcebreakerBadge: TypedContractMethod<[], [void], "nonpayable">;

  claimLoginStreakBadge: TypedContractMethod<[], [void], "nonpayable">;

  claimTopRoasterBadge: TypedContractMethod<[], [void], "nonpayable">;

  deauthorizeMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  firstActivityBadgeURI: TypedContractMethod<[], [string], "view">;

  firstActivityRequirement: TypedContractMethod<[], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getBadgeMetadata: TypedContractMethod<
    [badgeId: BigNumberish],
    [string],
    "view"
  >;

  getBadges: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  hasActivityStreakBadge: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  hasChainMasterBadge: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  hasFirstActivityBadge: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  hasIcebreakerBadge: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  hasLoginStreakBadge: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  hasTopRoasterBadge: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  icebreakerBadgeURI: TypedContractMethod<[], [string], "view">;

  icebreakerRequirement: TypedContractMethod<[], [bigint], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedMinter: TypedContractMethod<
    [minter: AddressLike],
    [boolean],
    "view"
  >;

  loginStreakBadgeURI: TypedContractMethod<[], [string], "view">;

  loginStreakRequirement: TypedContractMethod<[], [bigint], "view">;

  mintBadge: TypedContractMethod<
    [user: AddressLike, badgeType: string, metadataURI: string],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pointsContract: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBadgeRequirements: TypedContractMethod<
    [
      _firstActivityRequirement: BigNumberish,
      _loginStreakRequirement: BigNumberish,
      _activityStreakRequirement: BigNumberish,
      _topRoasterRequirement: BigNumberish,
      _chainMasterRequirement: BigNumberish,
      _icebreakerRequirement: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setBadgeURIs: TypedContractMethod<
    [
      _firstActivityBadgeURI: string,
      _loginStreakBadgeURI: string,
      _activityStreakBadgeURI: string,
      _topRoasterBadgeURI: string,
      _chainMasterBadgeURI: string,
      _icebreakerBadgeURI: string
    ],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[newBaseURI: string], [void], "nonpayable">;

  setPointsContract: TypedContractMethod<
    [_pointsContract: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  topRoasterBadgeURI: TypedContractMethod<[], [string], "view">;

  topRoasterRequirement: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userBadges: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activityStreakBadgeURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activityStreakRequirement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedMinters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "badgeMetadata"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainMasterBadgeURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainMasterRequirement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimActivityStreakBadge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimChainMasterBadge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimFirstActivityBadge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimIcebreakerBadge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimLoginStreakBadge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTopRoasterBadge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deauthorizeMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "firstActivityBadgeURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "firstActivityRequirement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBadgeMetadata"
  ): TypedContractMethod<[badgeId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBadges"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasActivityStreakBadge"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasChainMasterBadge"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasFirstActivityBadge"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasIcebreakerBadge"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasLoginStreakBadge"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasTopRoasterBadge"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "icebreakerBadgeURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "icebreakerRequirement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedMinter"
  ): TypedContractMethod<[minter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "loginStreakBadgeURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "loginStreakRequirement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintBadge"
  ): TypedContractMethod<
    [user: AddressLike, badgeType: string, metadataURI: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pointsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBadgeRequirements"
  ): TypedContractMethod<
    [
      _firstActivityRequirement: BigNumberish,
      _loginStreakRequirement: BigNumberish,
      _activityStreakRequirement: BigNumberish,
      _topRoasterRequirement: BigNumberish,
      _chainMasterRequirement: BigNumberish,
      _icebreakerRequirement: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBadgeURIs"
  ): TypedContractMethod<
    [
      _firstActivityBadgeURI: string,
      _loginStreakBadgeURI: string,
      _activityStreakBadgeURI: string,
      _topRoasterBadgeURI: string,
      _chainMasterBadgeURI: string,
      _icebreakerBadgeURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPointsContract"
  ): TypedContractMethod<[_pointsContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "topRoasterBadgeURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "topRoasterRequirement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userBadges"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BadgeClaimed"
  ): TypedContractEvent<
    BadgeClaimedEvent.InputTuple,
    BadgeClaimedEvent.OutputTuple,
    BadgeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "BadgeMinted"
  ): TypedContractEvent<
    BadgeMintedEvent.InputTuple,
    BadgeMintedEvent.OutputTuple,
    BadgeMintedEvent.OutputObject
  >;
  getEvent(
    key: "BaseURIUpdated"
  ): TypedContractEvent<
    BaseURIUpdatedEvent.InputTuple,
    BaseURIUpdatedEvent.OutputTuple,
    BaseURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinterAuthorized"
  ): TypedContractEvent<
    MinterAuthorizedEvent.InputTuple,
    MinterAuthorizedEvent.OutputTuple,
    MinterAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "MinterDeauthorized"
  ): TypedContractEvent<
    MinterDeauthorizedEvent.InputTuple,
    MinterDeauthorizedEvent.OutputTuple,
    MinterDeauthorizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BadgeClaimed(address,string)": TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;
    BadgeClaimed: TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;

    "BadgeMinted(address,uint256,string)": TypedContractEvent<
      BadgeMintedEvent.InputTuple,
      BadgeMintedEvent.OutputTuple,
      BadgeMintedEvent.OutputObject
    >;
    BadgeMinted: TypedContractEvent<
      BadgeMintedEvent.InputTuple,
      BadgeMintedEvent.OutputTuple,
      BadgeMintedEvent.OutputObject
    >;

    "BaseURIUpdated(string)": TypedContractEvent<
      BaseURIUpdatedEvent.InputTuple,
      BaseURIUpdatedEvent.OutputTuple,
      BaseURIUpdatedEvent.OutputObject
    >;
    BaseURIUpdated: TypedContractEvent<
      BaseURIUpdatedEvent.InputTuple,
      BaseURIUpdatedEvent.OutputTuple,
      BaseURIUpdatedEvent.OutputObject
    >;

    "MinterAuthorized(address)": TypedContractEvent<
      MinterAuthorizedEvent.InputTuple,
      MinterAuthorizedEvent.OutputTuple,
      MinterAuthorizedEvent.OutputObject
    >;
    MinterAuthorized: TypedContractEvent<
      MinterAuthorizedEvent.InputTuple,
      MinterAuthorizedEvent.OutputTuple,
      MinterAuthorizedEvent.OutputObject
    >;

    "MinterDeauthorized(address)": TypedContractEvent<
      MinterDeauthorizedEvent.InputTuple,
      MinterDeauthorizedEvent.OutputTuple,
      MinterDeauthorizedEvent.OutputObject
    >;
    MinterDeauthorized: TypedContractEvent<
      MinterDeauthorizedEvent.InputTuple,
      MinterDeauthorizedEvent.OutputTuple,
      MinterDeauthorizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
