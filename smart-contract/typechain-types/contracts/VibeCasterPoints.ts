/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VibeCasterPointsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activityStreak"
      | "activityStreakBonus"
      | "authorizeContract"
      | "authorizedContracts"
      | "dailyLogin"
      | "dailyLoginPoints"
      | "deauthorizeContract"
      | "deductPoints"
      | "earnPoints"
      | "getActivityStreak"
      | "getLastActivity"
      | "getLastLogin"
      | "getLeaderboard"
      | "getLoginStreak"
      | "getPoints"
      | "isAuthorized"
      | "lastActivityTimestamp"
      | "lastLoginTimestamp"
      | "loginStreak"
      | "owner"
      | "recordActivity"
      | "renounceOwnership"
      | "streakBonusPoints"
      | "transferOwnership"
      | "updatePointValues"
      | "userPoints"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivityStreak"
      | "ContractAuthorized"
      | "ContractDeauthorized"
      | "DailyLogin"
      | "OwnershipTransferred"
      | "PointsAwarded"
      | "PointsDeducted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activityStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activityStreakBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyLogin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyLoginPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deductPoints",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "earnPoints",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivityStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastLogin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoginStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastActivityTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLoginTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loginStreak",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordActivity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "streakBonusPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePointValues",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPoints",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activityStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activityStreakBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyLogin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailyLoginPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deductPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earnPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivityStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastLogin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoginStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastActivityTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLoginTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loginStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streakBonusPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePointValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userPoints", data: BytesLike): Result;
}

export namespace ActivityStreakEvent {
  export type InputTuple = [
    user: AddressLike,
    streak: BigNumberish,
    bonusPoints: BigNumberish
  ];
  export type OutputTuple = [user: string, streak: bigint, bonusPoints: bigint];
  export interface OutputObject {
    user: string;
    streak: bigint;
    bonusPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractAuthorizedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractDeauthorizedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DailyLoginEvent {
  export type InputTuple = [
    user: AddressLike,
    points: BigNumberish,
    streak: BigNumberish
  ];
  export type OutputTuple = [user: string, points: bigint, streak: bigint];
  export interface OutputObject {
    user: string;
    points: bigint;
    streak: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsAwardedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [user: string, amount: bigint, reason: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsDeductedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [user: string, amount: bigint, reason: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VibeCasterPoints extends BaseContract {
  connect(runner?: ContractRunner | null): VibeCasterPoints;
  waitForDeployment(): Promise<this>;

  interface: VibeCasterPointsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activityStreak: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  activityStreakBonus: TypedContractMethod<[], [bigint], "view">;

  authorizeContract: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  dailyLogin: TypedContractMethod<[], [void], "nonpayable">;

  dailyLoginPoints: TypedContractMethod<[], [bigint], "view">;

  deauthorizeContract: TypedContractMethod<
    [contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  deductPoints: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  earnPoints: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  getActivityStreak: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getLastActivity: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getLastLogin: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getLeaderboard: TypedContractMethod<
    [startIndex: BigNumberish, endIndex: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;

  getLoginStreak: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getPoints: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isAuthorized: TypedContractMethod<
    [contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  lastActivityTimestamp: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  lastLoginTimestamp: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  loginStreak: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recordActivity: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  streakBonusPoints: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePointValues: TypedContractMethod<
    [
      newDailyLoginPoints: BigNumberish,
      newStreakBonusPoints: BigNumberish,
      newActivityStreakBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userPoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activityStreak"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "activityStreakBonus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizeContract"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "dailyLogin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dailyLoginPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deauthorizeContract"
  ): TypedContractMethod<[contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deductPoints"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earnPoints"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActivityStreak"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastActivity"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastLogin"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [startIndex: BigNumberish, endIndex: BigNumberish],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLoginStreak"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoints"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<[contractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastActivityTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastLoginTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "loginStreak"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordActivity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "streakBonusPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePointValues"
  ): TypedContractMethod<
    [
      newDailyLoginPoints: BigNumberish,
      newStreakBonusPoints: BigNumberish,
      newActivityStreakBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userPoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "ActivityStreak"
  ): TypedContractEvent<
    ActivityStreakEvent.InputTuple,
    ActivityStreakEvent.OutputTuple,
    ActivityStreakEvent.OutputObject
  >;
  getEvent(
    key: "ContractAuthorized"
  ): TypedContractEvent<
    ContractAuthorizedEvent.InputTuple,
    ContractAuthorizedEvent.OutputTuple,
    ContractAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "ContractDeauthorized"
  ): TypedContractEvent<
    ContractDeauthorizedEvent.InputTuple,
    ContractDeauthorizedEvent.OutputTuple,
    ContractDeauthorizedEvent.OutputObject
  >;
  getEvent(
    key: "DailyLogin"
  ): TypedContractEvent<
    DailyLoginEvent.InputTuple,
    DailyLoginEvent.OutputTuple,
    DailyLoginEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsAwarded"
  ): TypedContractEvent<
    PointsAwardedEvent.InputTuple,
    PointsAwardedEvent.OutputTuple,
    PointsAwardedEvent.OutputObject
  >;
  getEvent(
    key: "PointsDeducted"
  ): TypedContractEvent<
    PointsDeductedEvent.InputTuple,
    PointsDeductedEvent.OutputTuple,
    PointsDeductedEvent.OutputObject
  >;

  filters: {
    "ActivityStreak(address,uint256,uint256)": TypedContractEvent<
      ActivityStreakEvent.InputTuple,
      ActivityStreakEvent.OutputTuple,
      ActivityStreakEvent.OutputObject
    >;
    ActivityStreak: TypedContractEvent<
      ActivityStreakEvent.InputTuple,
      ActivityStreakEvent.OutputTuple,
      ActivityStreakEvent.OutputObject
    >;

    "ContractAuthorized(address)": TypedContractEvent<
      ContractAuthorizedEvent.InputTuple,
      ContractAuthorizedEvent.OutputTuple,
      ContractAuthorizedEvent.OutputObject
    >;
    ContractAuthorized: TypedContractEvent<
      ContractAuthorizedEvent.InputTuple,
      ContractAuthorizedEvent.OutputTuple,
      ContractAuthorizedEvent.OutputObject
    >;

    "ContractDeauthorized(address)": TypedContractEvent<
      ContractDeauthorizedEvent.InputTuple,
      ContractDeauthorizedEvent.OutputTuple,
      ContractDeauthorizedEvent.OutputObject
    >;
    ContractDeauthorized: TypedContractEvent<
      ContractDeauthorizedEvent.InputTuple,
      ContractDeauthorizedEvent.OutputTuple,
      ContractDeauthorizedEvent.OutputObject
    >;

    "DailyLogin(address,uint256,uint256)": TypedContractEvent<
      DailyLoginEvent.InputTuple,
      DailyLoginEvent.OutputTuple,
      DailyLoginEvent.OutputObject
    >;
    DailyLogin: TypedContractEvent<
      DailyLoginEvent.InputTuple,
      DailyLoginEvent.OutputTuple,
      DailyLoginEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsAwarded(address,uint256,string)": TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;
    PointsAwarded: TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;

    "PointsDeducted(address,uint256,string)": TypedContractEvent<
      PointsDeductedEvent.InputTuple,
      PointsDeductedEvent.OutputTuple,
      PointsDeductedEvent.OutputObject
    >;
    PointsDeducted: TypedContractEvent<
      PointsDeductedEvent.InputTuple,
      PointsDeductedEvent.OutputTuple,
      PointsDeductedEvent.OutputObject
    >;
  };
}
