/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChainReactionContract {
  export type ChallengeStruct = {
    initiator: AddressLike;
    prompt: string;
    promptImageIpfsHash: string;
    timestamp: BigNumberish;
    responseIds: BigNumberish[];
    exists: boolean;
  };

  export type ChallengeStructOutput = [
    initiator: string,
    prompt: string,
    promptImageIpfsHash: string,
    timestamp: bigint,
    responseIds: bigint[],
    exists: boolean
  ] & {
    initiator: string;
    prompt: string;
    promptImageIpfsHash: string;
    timestamp: bigint;
    responseIds: bigint[];
    exists: boolean;
  };

  export type ResponseStruct = {
    responder: AddressLike;
    parentChallengeId: BigNumberish;
    parentResponseId: BigNumberish;
    responseText: string;
    responseImageIpfsHash: string;
    timestamp: BigNumberish;
    childResponseIds: BigNumberish[];
    exists: boolean;
  };

  export type ResponseStructOutput = [
    responder: string,
    parentChallengeId: bigint,
    parentResponseId: bigint,
    responseText: string,
    responseImageIpfsHash: string,
    timestamp: bigint,
    childResponseIds: bigint[],
    exists: boolean
  ] & {
    responder: string;
    parentChallengeId: bigint;
    parentResponseId: bigint;
    responseText: string;
    responseImageIpfsHash: string;
    timestamp: bigint;
    childResponseIds: bigint[];
    exists: boolean;
  };
}

export interface ChainReactionContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "badgesContract"
      | "challenges"
      | "getActiveChallenges"
      | "getChain"
      | "getChallenge"
      | "getChallengeResponseCount"
      | "getResponse"
      | "getResponseChain"
      | "getResponseChildCount"
      | "getUserChallenges"
      | "getUserResponses"
      | "joinChallenge"
      | "owner"
      | "pointsContract"
      | "pointsPerChallenge"
      | "pointsPerResponse"
      | "renounceOwnership"
      | "responses"
      | "startChallenge"
      | "totalChallenges"
      | "totalResponses"
      | "transferOwnership"
      | "updatePoints"
      | "userChallenges"
      | "userResponses"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChallengeJoined"
      | "ChallengeStarted"
      | "OwnershipTransferred"
      | "PointsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "badgesContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challenges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveChallenges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeResponseCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseChildCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserChallenges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserResponses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinChallenge",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerChallenge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "responses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startChallenge",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalChallenges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalResponses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userChallenges",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userResponses",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "badgesContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveChallenges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeResponseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponseChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponseChildCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserChallenges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserResponses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "responses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalChallenges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalResponses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userChallenges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userResponses",
    data: BytesLike
  ): Result;
}

export namespace ChallengeJoinedEvent {
  export type InputTuple = [
    responder: AddressLike,
    challengeId: BigNumberish,
    responseId: BigNumberish,
    parentResponseId: BigNumberish,
    responseText: string,
    responseImageIpfsHash: string
  ];
  export type OutputTuple = [
    responder: string,
    challengeId: bigint,
    responseId: bigint,
    parentResponseId: bigint,
    responseText: string,
    responseImageIpfsHash: string
  ];
  export interface OutputObject {
    responder: string;
    challengeId: bigint;
    responseId: bigint;
    parentResponseId: bigint;
    responseText: string;
    responseImageIpfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeStartedEvent {
  export type InputTuple = [
    initiator: AddressLike,
    challengeId: BigNumberish,
    prompt: string,
    promptImageIpfsHash: string
  ];
  export type OutputTuple = [
    initiator: string,
    challengeId: bigint,
    prompt: string,
    promptImageIpfsHash: string
  ];
  export interface OutputObject {
    initiator: string;
    challengeId: bigint;
    prompt: string;
    promptImageIpfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsUpdatedEvent {
  export type InputTuple = [
    newPointsPerChallenge: BigNumberish,
    newPointsPerResponse: BigNumberish
  ];
  export type OutputTuple = [
    newPointsPerChallenge: bigint,
    newPointsPerResponse: bigint
  ];
  export interface OutputObject {
    newPointsPerChallenge: bigint;
    newPointsPerResponse: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainReactionContract extends BaseContract {
  connect(runner?: ContractRunner | null): ChainReactionContract;
  waitForDeployment(): Promise<this>;

  interface: ChainReactionContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  badgesContract: TypedContractMethod<[], [string], "view">;

  challenges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        initiator: string;
        prompt: string;
        promptImageIpfsHash: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getActiveChallenges: TypedContractMethod<
    [limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  getChain: TypedContractMethod<
    [challengeId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getChallenge: TypedContractMethod<
    [challengeId: BigNumberish],
    [ChainReactionContract.ChallengeStructOutput],
    "view"
  >;

  getChallengeResponseCount: TypedContractMethod<
    [challengeId: BigNumberish],
    [bigint],
    "view"
  >;

  getResponse: TypedContractMethod<
    [responseId: BigNumberish],
    [ChainReactionContract.ResponseStructOutput],
    "view"
  >;

  getResponseChain: TypedContractMethod<
    [responseId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getResponseChildCount: TypedContractMethod<
    [responseId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserChallenges: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserResponses: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  joinChallenge: TypedContractMethod<
    [
      challengeId: BigNumberish,
      parentResponseId: BigNumberish,
      responseText: string,
      responseImageIpfsHash: string
    ],
    [bigint],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pointsContract: TypedContractMethod<[], [string], "view">;

  pointsPerChallenge: TypedContractMethod<[], [bigint], "view">;

  pointsPerResponse: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  responses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, string, bigint, boolean] & {
        responder: string;
        parentChallengeId: bigint;
        parentResponseId: bigint;
        responseText: string;
        responseImageIpfsHash: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  startChallenge: TypedContractMethod<
    [prompt: string, promptImageIpfsHash: string],
    [bigint],
    "nonpayable"
  >;

  totalChallenges: TypedContractMethod<[], [bigint], "view">;

  totalResponses: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePoints: TypedContractMethod<
    [newPointsPerChallenge: BigNumberish, newPointsPerResponse: BigNumberish],
    [void],
    "nonpayable"
  >;

  userChallenges: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userResponses: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "badgesContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "challenges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        initiator: string;
        prompt: string;
        promptImageIpfsHash: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveChallenges"
  ): TypedContractMethod<[limit: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getChain"
  ): TypedContractMethod<[challengeId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getChallenge"
  ): TypedContractMethod<
    [challengeId: BigNumberish],
    [ChainReactionContract.ChallengeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChallengeResponseCount"
  ): TypedContractMethod<[challengeId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getResponse"
  ): TypedContractMethod<
    [responseId: BigNumberish],
    [ChainReactionContract.ResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResponseChain"
  ): TypedContractMethod<[responseId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getResponseChildCount"
  ): TypedContractMethod<[responseId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserChallenges"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserResponses"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "joinChallenge"
  ): TypedContractMethod<
    [
      challengeId: BigNumberish,
      parentResponseId: BigNumberish,
      responseText: string,
      responseImageIpfsHash: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pointsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pointsPerChallenge"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointsPerResponse"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "responses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, string, bigint, boolean] & {
        responder: string;
        parentChallengeId: bigint;
        parentResponseId: bigint;
        responseText: string;
        responseImageIpfsHash: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "startChallenge"
  ): TypedContractMethod<
    [prompt: string, promptImageIpfsHash: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalChallenges"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalResponses"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePoints"
  ): TypedContractMethod<
    [newPointsPerChallenge: BigNumberish, newPointsPerResponse: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userChallenges"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userResponses"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ChallengeJoined"
  ): TypedContractEvent<
    ChallengeJoinedEvent.InputTuple,
    ChallengeJoinedEvent.OutputTuple,
    ChallengeJoinedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeStarted"
  ): TypedContractEvent<
    ChallengeStartedEvent.InputTuple,
    ChallengeStartedEvent.OutputTuple,
    ChallengeStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsUpdated"
  ): TypedContractEvent<
    PointsUpdatedEvent.InputTuple,
    PointsUpdatedEvent.OutputTuple,
    PointsUpdatedEvent.OutputObject
  >;

  filters: {
    "ChallengeJoined(address,uint256,uint256,uint256,string,string)": TypedContractEvent<
      ChallengeJoinedEvent.InputTuple,
      ChallengeJoinedEvent.OutputTuple,
      ChallengeJoinedEvent.OutputObject
    >;
    ChallengeJoined: TypedContractEvent<
      ChallengeJoinedEvent.InputTuple,
      ChallengeJoinedEvent.OutputTuple,
      ChallengeJoinedEvent.OutputObject
    >;

    "ChallengeStarted(address,uint256,string,string)": TypedContractEvent<
      ChallengeStartedEvent.InputTuple,
      ChallengeStartedEvent.OutputTuple,
      ChallengeStartedEvent.OutputObject
    >;
    ChallengeStarted: TypedContractEvent<
      ChallengeStartedEvent.InputTuple,
      ChallengeStartedEvent.OutputTuple,
      ChallengeStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsUpdated(uint256,uint256)": TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;
    PointsUpdated: TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;
  };
}
