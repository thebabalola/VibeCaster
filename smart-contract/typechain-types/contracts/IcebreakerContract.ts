/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IcebreakerContract {
  export type CategoryStruct = {
    name: string;
    description: string;
    exists: boolean;
  };

  export type CategoryStructOutput = [
    name: string,
    description: string,
    exists: boolean
  ] & { name: string; description: string; exists: boolean };

  export type PromptStruct = {
    creator: AddressLike;
    text: string;
    category: string;
    timestamp: BigNumberish;
    exists: boolean;
  };

  export type PromptStructOutput = [
    creator: string,
    text: string,
    category: string,
    timestamp: bigint,
    exists: boolean
  ] & {
    creator: string;
    text: string;
    category: string;
    timestamp: bigint;
    exists: boolean;
  };

  export type ResponseStruct = {
    responder: AddressLike;
    responseText: string;
    responseImageIpfsHash: string;
    timestamp: BigNumberish;
    exists: boolean;
  };

  export type ResponseStructOutput = [
    responder: string,
    responseText: string,
    responseImageIpfsHash: string,
    timestamp: bigint,
    exists: boolean
  ] & {
    responder: string;
    responseText: string;
    responseImageIpfsHash: string;
    timestamp: bigint;
    exists: boolean;
  };
}

export interface IcebreakerContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "badgesContract"
      | "categories"
      | "categoryExists"
      | "createCategory"
      | "createPoll"
      | "createPrompt"
      | "getCategories"
      | "getCategory"
      | "getPoll"
      | "getPrompt"
      | "getRandomPrompt"
      | "getResponses"
      | "getUserPromptCount"
      | "getUserPrompts"
      | "getUserResponseCount"
      | "getUserResponses"
      | "getUserVote"
      | "hasUserVoted"
      | "owner"
      | "pointsContract"
      | "pointsPerPrompt"
      | "pointsPerResponse"
      | "pointsPerVote"
      | "polls"
      | "promptResponses"
      | "prompts"
      | "renounceOwnership"
      | "submitResponse"
      | "totalCategories"
      | "totalPolls"
      | "totalPrompts"
      | "transferOwnership"
      | "updatePoints"
      | "userPromptCount"
      | "userPrompts"
      | "userResponseCount"
      | "userResponses"
      | "votePoll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CategoryCreated"
      | "OwnershipTransferred"
      | "PointsUpdated"
      | "PollCreated"
      | "PollVoted"
      | "PromptCreated"
      | "ResponseSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "badgesContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "categories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "categoryExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCategory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPoll",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrompt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrompt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomPrompt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResponses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPromptCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPrompts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserResponseCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserResponses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVote",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserVoted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerPrompt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerVote",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "polls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "promptResponses",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prompts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitResponse",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPolls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPrompts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoints",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPromptCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPrompts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userResponseCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userResponses",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePoll",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "badgesContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "categories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "categoryExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPrompt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrompt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRandomPrompt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPromptCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPrompts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserResponseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserResponses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerPrompt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promptResponses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prompts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPolls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPrompts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPromptCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPrompts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userResponseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userResponses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votePoll", data: BytesLike): Result;
}

export namespace CategoryCreatedEvent {
  export type InputTuple = [
    categoryId: BigNumberish,
    name: string,
    description: string
  ];
  export type OutputTuple = [
    categoryId: bigint,
    name: string,
    description: string
  ];
  export interface OutputObject {
    categoryId: bigint;
    name: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsUpdatedEvent {
  export type InputTuple = [
    newPointsPerPrompt: BigNumberish,
    newPointsPerResponse: BigNumberish,
    newPointsPerVote: BigNumberish
  ];
  export type OutputTuple = [
    newPointsPerPrompt: bigint,
    newPointsPerResponse: bigint,
    newPointsPerVote: bigint
  ];
  export interface OutputObject {
    newPointsPerPrompt: bigint;
    newPointsPerResponse: bigint;
    newPointsPerVote: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PollCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    pollId: BigNumberish,
    question: string,
    options: string[]
  ];
  export type OutputTuple = [
    creator: string,
    pollId: bigint,
    question: string,
    options: string[]
  ];
  export interface OutputObject {
    creator: string;
    pollId: bigint;
    question: string;
    options: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PollVotedEvent {
  export type InputTuple = [
    voter: AddressLike,
    pollId: BigNumberish,
    optionIndex: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    pollId: bigint,
    optionIndex: bigint
  ];
  export interface OutputObject {
    voter: string;
    pollId: bigint;
    optionIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PromptCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    promptId: BigNumberish,
    text: string,
    category: string
  ];
  export type OutputTuple = [
    creator: string,
    promptId: bigint,
    text: string,
    category: string
  ];
  export interface OutputObject {
    creator: string;
    promptId: bigint;
    text: string;
    category: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResponseSubmittedEvent {
  export type InputTuple = [
    user: AddressLike,
    promptId: BigNumberish,
    responseText: string,
    responseImageIpfsHash: string
  ];
  export type OutputTuple = [
    user: string,
    promptId: bigint,
    responseText: string,
    responseImageIpfsHash: string
  ];
  export interface OutputObject {
    user: string;
    promptId: bigint;
    responseText: string;
    responseImageIpfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IcebreakerContract extends BaseContract {
  connect(runner?: ContractRunner | null): IcebreakerContract;
  waitForDeployment(): Promise<this>;

  interface: IcebreakerContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  badgesContract: TypedContractMethod<[], [string], "view">;

  categories: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        name: string;
        description: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  categoryExists: TypedContractMethod<[category: string], [boolean], "view">;

  createCategory: TypedContractMethod<
    [name: string, description: string],
    [bigint],
    "nonpayable"
  >;

  createPoll: TypedContractMethod<
    [question: string, options: string[]],
    [bigint],
    "nonpayable"
  >;

  createPrompt: TypedContractMethod<
    [text: string, category: string],
    [bigint],
    "nonpayable"
  >;

  getCategories: TypedContractMethod<
    [],
    [IcebreakerContract.CategoryStructOutput[]],
    "view"
  >;

  getCategory: TypedContractMethod<
    [categoryId: BigNumberish],
    [IcebreakerContract.CategoryStructOutput],
    "view"
  >;

  getPoll: TypedContractMethod<
    [pollId: BigNumberish],
    [
      [string, string, string[], bigint[], bigint] & {
        creator: string;
        question: string;
        options: string[];
        voteCounts: bigint[];
        totalVotes: bigint;
      }
    ],
    "view"
  >;

  getPrompt: TypedContractMethod<
    [promptId: BigNumberish],
    [IcebreakerContract.PromptStructOutput],
    "view"
  >;

  getRandomPrompt: TypedContractMethod<[], [bigint], "view">;

  getResponses: TypedContractMethod<
    [promptId: BigNumberish],
    [IcebreakerContract.ResponseStructOutput[]],
    "view"
  >;

  getUserPromptCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserPrompts: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserResponseCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserResponses: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserVote: TypedContractMethod<
    [user: AddressLike, pollId: BigNumberish],
    [bigint],
    "view"
  >;

  hasUserVoted: TypedContractMethod<
    [user: AddressLike, pollId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pointsContract: TypedContractMethod<[], [string], "view">;

  pointsPerPrompt: TypedContractMethod<[], [bigint], "view">;

  pointsPerResponse: TypedContractMethod<[], [bigint], "view">;

  pointsPerVote: TypedContractMethod<[], [bigint], "view">;

  polls: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        creator: string;
        question: string;
        totalVotes: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  promptResponses: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        responder: string;
        responseText: string;
        responseImageIpfsHash: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  prompts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        creator: string;
        text: string;
        category: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitResponse: TypedContractMethod<
    [
      promptId: BigNumberish,
      responseText: string,
      responseImageIpfsHash: string
    ],
    [bigint],
    "nonpayable"
  >;

  totalCategories: TypedContractMethod<[], [bigint], "view">;

  totalPolls: TypedContractMethod<[], [bigint], "view">;

  totalPrompts: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePoints: TypedContractMethod<
    [
      newPointsPerPrompt: BigNumberish,
      newPointsPerResponse: BigNumberish,
      newPointsPerVote: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userPromptCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userPrompts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userResponseCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userResponses: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  votePoll: TypedContractMethod<
    [pollId: BigNumberish, optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "badgesContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "categories"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        name: string;
        description: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "categoryExists"
  ): TypedContractMethod<[category: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "createCategory"
  ): TypedContractMethod<
    [name: string, description: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPoll"
  ): TypedContractMethod<
    [question: string, options: string[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPrompt"
  ): TypedContractMethod<
    [text: string, category: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCategories"
  ): TypedContractMethod<
    [],
    [IcebreakerContract.CategoryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCategory"
  ): TypedContractMethod<
    [categoryId: BigNumberish],
    [IcebreakerContract.CategoryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoll"
  ): TypedContractMethod<
    [pollId: BigNumberish],
    [
      [string, string, string[], bigint[], bigint] & {
        creator: string;
        question: string;
        options: string[];
        voteCounts: bigint[];
        totalVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrompt"
  ): TypedContractMethod<
    [promptId: BigNumberish],
    [IcebreakerContract.PromptStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRandomPrompt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getResponses"
  ): TypedContractMethod<
    [promptId: BigNumberish],
    [IcebreakerContract.ResponseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPromptCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPrompts"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserResponseCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserResponses"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserVote"
  ): TypedContractMethod<
    [user: AddressLike, pollId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserVoted"
  ): TypedContractMethod<
    [user: AddressLike, pollId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pointsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pointsPerPrompt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointsPerResponse"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointsPerVote"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "polls"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        creator: string;
        question: string;
        totalVotes: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "promptResponses"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        responder: string;
        responseText: string;
        responseImageIpfsHash: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "prompts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        creator: string;
        text: string;
        category: string;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitResponse"
  ): TypedContractMethod<
    [
      promptId: BigNumberish,
      responseText: string,
      responseImageIpfsHash: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalCategories"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPolls"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPrompts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePoints"
  ): TypedContractMethod<
    [
      newPointsPerPrompt: BigNumberish,
      newPointsPerResponse: BigNumberish,
      newPointsPerVote: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userPromptCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPrompts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userResponseCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userResponses"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePoll"
  ): TypedContractMethod<
    [pollId: BigNumberish, optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CategoryCreated"
  ): TypedContractEvent<
    CategoryCreatedEvent.InputTuple,
    CategoryCreatedEvent.OutputTuple,
    CategoryCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsUpdated"
  ): TypedContractEvent<
    PointsUpdatedEvent.InputTuple,
    PointsUpdatedEvent.OutputTuple,
    PointsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PollCreated"
  ): TypedContractEvent<
    PollCreatedEvent.InputTuple,
    PollCreatedEvent.OutputTuple,
    PollCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PollVoted"
  ): TypedContractEvent<
    PollVotedEvent.InputTuple,
    PollVotedEvent.OutputTuple,
    PollVotedEvent.OutputObject
  >;
  getEvent(
    key: "PromptCreated"
  ): TypedContractEvent<
    PromptCreatedEvent.InputTuple,
    PromptCreatedEvent.OutputTuple,
    PromptCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ResponseSubmitted"
  ): TypedContractEvent<
    ResponseSubmittedEvent.InputTuple,
    ResponseSubmittedEvent.OutputTuple,
    ResponseSubmittedEvent.OutputObject
  >;

  filters: {
    "CategoryCreated(uint256,string,string)": TypedContractEvent<
      CategoryCreatedEvent.InputTuple,
      CategoryCreatedEvent.OutputTuple,
      CategoryCreatedEvent.OutputObject
    >;
    CategoryCreated: TypedContractEvent<
      CategoryCreatedEvent.InputTuple,
      CategoryCreatedEvent.OutputTuple,
      CategoryCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;
    PointsUpdated: TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;

    "PollCreated(address,uint256,string,string[])": TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;
    PollCreated: TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;

    "PollVoted(address,uint256,uint256)": TypedContractEvent<
      PollVotedEvent.InputTuple,
      PollVotedEvent.OutputTuple,
      PollVotedEvent.OutputObject
    >;
    PollVoted: TypedContractEvent<
      PollVotedEvent.InputTuple,
      PollVotedEvent.OutputTuple,
      PollVotedEvent.OutputObject
    >;

    "PromptCreated(address,uint256,string,string)": TypedContractEvent<
      PromptCreatedEvent.InputTuple,
      PromptCreatedEvent.OutputTuple,
      PromptCreatedEvent.OutputObject
    >;
    PromptCreated: TypedContractEvent<
      PromptCreatedEvent.InputTuple,
      PromptCreatedEvent.OutputTuple,
      PromptCreatedEvent.OutputObject
    >;

    "ResponseSubmitted(address,uint256,string,string)": TypedContractEvent<
      ResponseSubmittedEvent.InputTuple,
      ResponseSubmittedEvent.OutputTuple,
      ResponseSubmittedEvent.OutputObject
    >;
    ResponseSubmitted: TypedContractEvent<
      ResponseSubmittedEvent.InputTuple,
      ResponseSubmittedEvent.OutputTuple,
      ResponseSubmittedEvent.OutputObject
    >;
  };
}
