/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RoastMeContract {
  export type RoastStruct = {
    submitter: AddressLike;
    originalImageIpfsHash: string;
    roastIpfsHash: string;
    funnyVotes: BigNumberish;
    mehVotes: BigNumberish;
    timestamp: BigNumberish;
    exists: boolean;
  };

  export type RoastStructOutput = [
    submitter: string,
    originalImageIpfsHash: string,
    roastIpfsHash: string,
    funnyVotes: bigint,
    mehVotes: bigint,
    timestamp: bigint,
    exists: boolean
  ] & {
    submitter: string;
    originalImageIpfsHash: string;
    roastIpfsHash: string;
    funnyVotes: bigint;
    mehVotes: bigint;
    timestamp: bigint;
    exists: boolean;
  };
}

export interface RoastMeContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "badgesContract"
      | "getRoast"
      | "getTopRoasts"
      | "getUserRoasts"
      | "getUserVote"
      | "hasUserVoted"
      | "hasVoted"
      | "owner"
      | "pointsContract"
      | "pointsPerFunnyVote"
      | "pointsPerRoast"
      | "pointsPerVote"
      | "renounceOwnership"
      | "roasts"
      | "submitRoast"
      | "totalRoasts"
      | "transferOwnership"
      | "updatePoints"
      | "userRoasts"
      | "voteRoast"
      | "voteType"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PointsUpdated"
      | "RoastSubmitted"
      | "RoastVoted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "badgesContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoast",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopRoasts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoasts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVote",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserVoted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerFunnyVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerRoast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsPerVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roasts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRoast",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRoasts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoints",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRoasts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteRoast",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "voteType",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "badgesContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTopRoasts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoasts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerFunnyVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerRoast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointsPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roasts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitRoast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRoasts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userRoasts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteRoast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteType", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsUpdatedEvent {
  export type InputTuple = [
    newPointsPerRoast: BigNumberish,
    newPointsPerVote: BigNumberish,
    newPointsPerFunnyVote: BigNumberish
  ];
  export type OutputTuple = [
    newPointsPerRoast: bigint,
    newPointsPerVote: bigint,
    newPointsPerFunnyVote: bigint
  ];
  export interface OutputObject {
    newPointsPerRoast: bigint;
    newPointsPerVote: bigint;
    newPointsPerFunnyVote: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoastSubmittedEvent {
  export type InputTuple = [
    user: AddressLike,
    roastId: BigNumberish,
    originalImageIpfsHash: string,
    roastIpfsHash: string
  ];
  export type OutputTuple = [
    user: string,
    roastId: bigint,
    originalImageIpfsHash: string,
    roastIpfsHash: string
  ];
  export interface OutputObject {
    user: string;
    roastId: bigint;
    originalImageIpfsHash: string;
    roastIpfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoastVotedEvent {
  export type InputTuple = [
    voter: AddressLike,
    roastId: BigNumberish,
    isFunny: boolean
  ];
  export type OutputTuple = [voter: string, roastId: bigint, isFunny: boolean];
  export interface OutputObject {
    voter: string;
    roastId: bigint;
    isFunny: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RoastMeContract extends BaseContract {
  connect(runner?: ContractRunner | null): RoastMeContract;
  waitForDeployment(): Promise<this>;

  interface: RoastMeContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  badgesContract: TypedContractMethod<[], [string], "view">;

  getRoast: TypedContractMethod<
    [roastId: BigNumberish],
    [RoastMeContract.RoastStructOutput],
    "view"
  >;

  getTopRoasts: TypedContractMethod<[limit: BigNumberish], [bigint[]], "view">;

  getUserRoasts: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserVote: TypedContractMethod<
    [user: AddressLike, roastId: BigNumberish],
    [boolean],
    "view"
  >;

  hasUserVoted: TypedContractMethod<
    [user: AddressLike, roastId: BigNumberish],
    [boolean],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pointsContract: TypedContractMethod<[], [string], "view">;

  pointsPerFunnyVote: TypedContractMethod<[], [bigint], "view">;

  pointsPerRoast: TypedContractMethod<[], [bigint], "view">;

  pointsPerVote: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roasts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, boolean] & {
        submitter: string;
        originalImageIpfsHash: string;
        roastIpfsHash: string;
        funnyVotes: bigint;
        mehVotes: bigint;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  submitRoast: TypedContractMethod<
    [originalImageIpfsHash: string, roastIpfsHash: string],
    [bigint],
    "nonpayable"
  >;

  totalRoasts: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePoints: TypedContractMethod<
    [
      newPointsPerRoast: BigNumberish,
      newPointsPerVote: BigNumberish,
      newPointsPerFunnyVote: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userRoasts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  voteRoast: TypedContractMethod<
    [roastId: BigNumberish, isFunny: boolean],
    [void],
    "nonpayable"
  >;

  voteType: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "badgesContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoast"
  ): TypedContractMethod<
    [roastId: BigNumberish],
    [RoastMeContract.RoastStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTopRoasts"
  ): TypedContractMethod<[limit: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserRoasts"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserVote"
  ): TypedContractMethod<
    [user: AddressLike, roastId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserVoted"
  ): TypedContractMethod<
    [user: AddressLike, roastId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pointsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pointsPerFunnyVote"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointsPerRoast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointsPerVote"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roasts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, boolean] & {
        submitter: string;
        originalImageIpfsHash: string;
        roastIpfsHash: string;
        funnyVotes: bigint;
        mehVotes: bigint;
        timestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitRoast"
  ): TypedContractMethod<
    [originalImageIpfsHash: string, roastIpfsHash: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalRoasts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePoints"
  ): TypedContractMethod<
    [
      newPointsPerRoast: BigNumberish,
      newPointsPerVote: BigNumberish,
      newPointsPerFunnyVote: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userRoasts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "voteRoast"
  ): TypedContractMethod<
    [roastId: BigNumberish, isFunny: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteType"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PointsUpdated"
  ): TypedContractEvent<
    PointsUpdatedEvent.InputTuple,
    PointsUpdatedEvent.OutputTuple,
    PointsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoastSubmitted"
  ): TypedContractEvent<
    RoastSubmittedEvent.InputTuple,
    RoastSubmittedEvent.OutputTuple,
    RoastSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "RoastVoted"
  ): TypedContractEvent<
    RoastVotedEvent.InputTuple,
    RoastVotedEvent.OutputTuple,
    RoastVotedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PointsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;
    PointsUpdated: TypedContractEvent<
      PointsUpdatedEvent.InputTuple,
      PointsUpdatedEvent.OutputTuple,
      PointsUpdatedEvent.OutputObject
    >;

    "RoastSubmitted(address,uint256,string,string)": TypedContractEvent<
      RoastSubmittedEvent.InputTuple,
      RoastSubmittedEvent.OutputTuple,
      RoastSubmittedEvent.OutputObject
    >;
    RoastSubmitted: TypedContractEvent<
      RoastSubmittedEvent.InputTuple,
      RoastSubmittedEvent.OutputTuple,
      RoastSubmittedEvent.OutputObject
    >;

    "RoastVoted(address,uint256,bool)": TypedContractEvent<
      RoastVotedEvent.InputTuple,
      RoastVotedEvent.OutputTuple,
      RoastVotedEvent.OutputObject
    >;
    RoastVoted: TypedContractEvent<
      RoastVotedEvent.InputTuple,
      RoastVotedEvent.OutputTuple,
      RoastVotedEvent.OutputObject
    >;
  };
}
